package Project;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Random;

/**
 * This class sets up the animal grid, which then will be visualised by the Gui class.
 */
public class Model implements Serializable {

    private String randomString;
    private final int width;
    private final int row;
    private Random rand;
    private final File storageFile;
    private Animal[][] animal;
    private ArrayList<Shark> storeSharks;
    private ArrayList<String> possibleDirections;

    public Model(int width, int row) {
        this.width = width;
        this.row = row;
        animal = new Animal[width][row];
        rand = new Random();
        storageFile = new File("Model.ser");
        possibleDirections = new ArrayList<>();
        storeSharks = new ArrayList<>();
        placeAnimal();

       /* for(Shark a : storeSharks){
            System.out.println(a.toString());
        }

        */
    }

    public void placeAnimal() {
        if (animal == null) {
            animal = new Animal[width][row];
        }
        System.out.println("place Animals");
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < row; j++) {
                if (rand.nextInt(5) < 1) {
                    animal[i][j] = new Fish(); // place Fish-Object in animal Array
                }
            }
        }

        for (int i = 0; i < width; i++) {
            //System.out.println(i);
            for (int j = 0; j < row; j++) {
                // System.out.println(j);
                if (rand.nextInt(50) < 1 && !(animal[i][j] instanceof Fish)) {
                    animal[i][j] = new Shark(i, j);// place Shark-Object in animal Array
                    storeSharks.add((Shark) animal[i][j]);
                }
            }
        }

        for (int i = 0; i < width; i++) {
            for (int j = 0; j < row; j++) {
                if (animal[i][j] == null) {
                    animal[i][j] = new Water(); // place Water-Object in animal Array
                }
            }

        }
        // if no shark is generated by for-loop
        if (Shark.getNumOfSharks() == 0) {
            animal[width - 1][row - 1] = new Shark(width - 1, row - 1);
            storeSharks.add((Shark) animal[width - 1][row - 1]);
        }
    }


    public Animal getObject(int i, int j) {
        Animal a1;
        return a1 = animal[i][j];
    }

    public void resetAnimal() {
        System.out.println("Reset");
        Fish.resetSumOfFishSwarms();
        Shark.resetSumOfSharks();
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < row; j++) {
                animal[i][j] = null; // emptying the Array
            }
        }
    }

    /**
     * This method saves the Animal Array.
     * <p>
     * Created with help from Persistence notes (Powerpoint) and other sources:
     * https://stackoverflow.com/questions/1467193/java-serialization-of-multidimensional-array
     *
     * @param file is created when constuctor is envoked and gets stored within the running program
     */
    public void saveModel(File file) {
        try (final ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream(file))) {
            (objectOutputStream).writeObject(animal);
        } catch (IOException e) {
            e.printStackTrace();
        }
        System.out.println("saved");
    }

    /**
     * This method loads the Animal Array.
     * <p>
     * The loading was challenging, because the 2dArray had sometimes null assigned to it.
     * Therefore, I added the class Water to never have null assigned within the Array.
     * <p>
     * Created with help from Persistence notes (Powerpoint) and other source:
     * https://stackoverflow.com/questions/1467193/java-serialization-of-multidimensional-array
     *
     * @param file is created when constuctor is envoked and gets stored within the running program
     */
    public void loadModel(File file) {
        try (final ObjectInputStream objectInputStream = new ObjectInputStream(new FileInputStream(file))) {
            animal = (Animal[][]) objectInputStream.readObject();
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
        resetStoreSharksArrayList();
        //populate ArrayList of Sharks again
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < row; j++) {
                if (animal[i][j] instanceof Shark) {
                    storeSharks.add(new Shark(i, j));
                    //decrease stats per one, that amount of Shark is up to date
                    Shark.setSumOfSharks(Shark.getNumOfSharks() - 1);
                }
            }
        }
        System.out.println("loaded");
    }

    public File getStorageFile() {
        return storageFile;
    }

    public void letSharkSwim() {
        for (Shark a : storeSharks) {
            if (a.isAlive() == true) {
                moveShark(getNeighbours(a), a);
            }
        }
    }

    public ArrayList getNeighbours(Shark a) {

        //clear it, it might has previous data in it
        possibleDirections.clear();

        //neighbour fields
        int north = a.getPositiveNeighbourY();
        int south = a.getNegativeNeighbourY();
        int west = a.getNegativeNeighbourX();
        int east = a.getPositiveNeighbourX();

        if (north != -1000) {
            if (animal[a.getPositionX()][north] instanceof Water) {
                possibleDirections.add("north");
            }
        }

        if (south != -1000) {
            if (animal[a.getPositionX()][south] instanceof Water) {
                possibleDirections.add("south");
            }
        }

        if (west != -1000) {
            if (animal[west][a.getPositionY()] instanceof Water) {
                possibleDirections.add("west");
            }
        }

        if (east != -1000) {
            if (animal[east][a.getPositionY()] instanceof Water) {
                possibleDirections.add("east");
            }
        }
        return possibleDirections;
    }


    public void moveShark(ArrayList list, Shark a) {
        possibleDirections = list;
        //if shark is encountert by fish and walls
        if ((possibleDirections.isEmpty() == false)) {
            randomString = possibleDirections.get(rand.nextInt(possibleDirections.size()));

            animal[a.getPositionX()][a.getPositionY()] = null;
            animal[a.getPositionX()][a.getPositionY()] = new Water();
            Shark.setSumOfSharks(Shark.getNumOfSharks() - 1);

            // place it one more down
            if (randomString == "north") {
                animal[a.getPositionX()][a.getPositiveNeighbourY()] = new Shark(a.getPositionX(), a.getPositiveNeighbourY());
                a.setPositionY(a.getPositiveNeighbourY());
            }
            // place it one more up

            if (randomString == "south") {
                animal[a.getPositionX()][a.getNegativeNeighbourY()] = new Shark(a.getPositionX(), a.getNegativeNeighbourY());
                a.setPositionY(a.getNegativeNeighbourY());
            }

            // place it one more to the right

            if (randomString == "east") {
                animal[a.getPositiveNeighbourX()][a.getPositionY()] = new Shark(a.getPositiveNeighbourX(), a.getPositionY());
                a.setPositionX(a.getPositiveNeighbourX());
            }

            // place it one more to the left

            if (randomString == "west") {
                animal[a.getNegativeNeighbourX()][a.getPositionY()] = new Shark(a.getNegativeNeighbourX(), a.getPositionY());
                a.setPositionX(a.getNegativeNeighbourX());
            }

            //System.out.println(a.toString());
        }
        a.increaseAge();
        checkAge(a);
    }


    /**
     * deletes Sharks that reached age of 60
     */
    public void checkAge(Shark a) {

        if (a.isAlive() != true) {
            animal[a.getPositionX()][a.getPositionY()] = null;
            animal[a.getPositionX()][a.getPositionY()] = new Water();
            //Shark.setSumOfSharks(Shark.getNumOfSharks() - 1);
        }
    }


    public void spawnAShark() {
        int originalSize = storeSharks.size();

        for (int i = 0; i < originalSize; i++) {
            if (rand.nextInt(101) < 100 * Shark.getBirthProbability() && storeSharks.get(i).isAlive() == true) {


                possibleDirections = getNeighbours(storeSharks.get(i));

                //if shark is encountert by fish and walls
                if ((possibleDirections.isEmpty() == false)) {

                    randomString = possibleDirections.get(rand.nextInt(possibleDirections.size()));
                    // place it one more down
                    if (randomString == "north") {
                        animal[storeSharks.get(i).getPositionX()][storeSharks.get(i).getPositiveNeighbourY()] = new Shark(storeSharks.get(i).getPositionX(), storeSharks.get(i).getPositiveNeighbourY());
                        storeSharks.add(new Shark(storeSharks.get(i).getPositionX(), storeSharks.get(i).getPositiveNeighbourY()));
                        Shark.setSumOfSharks(Shark.getNumOfSharks() - 2);

                    }
                    // place it one more up

                    if (randomString == "south") {
                        animal[storeSharks.get(i).getPositionX()][storeSharks.get(i).getNegativeNeighbourY()] = new Shark(storeSharks.get(i).getPositionX(), storeSharks.get(i).getNegativeNeighbourY());
                        storeSharks.add(new Shark(storeSharks.get(i).getPositionX(), storeSharks.get(i).getNegativeNeighbourY()));
                        Shark.setSumOfSharks(Shark.getNumOfSharks() - 2);
                    }

                    // place it one more to the right

                    if (randomString == "east") {
                        animal[storeSharks.get(i).getPositiveNeighbourX()][storeSharks.get(i).getPositionY()] = new Shark(storeSharks.get(i).getPositiveNeighbourX(), storeSharks.get(i).getPositionY());
                        storeSharks.add(new Shark(storeSharks.get(i).getPositiveNeighbourX(), storeSharks.get(i).getPositionY()));
                        Shark.setSumOfSharks(Shark.getNumOfSharks() - 2);
                    }

                    // place it one more to the left

                    if (randomString == "west") {
                        animal[storeSharks.get(i).getNegativeNeighbourX()][storeSharks.get(i).getPositionY()] = new Shark(storeSharks.get(i).getNegativeNeighbourX(), storeSharks.get(i).getPositionY());
                        storeSharks.add(new Shark(storeSharks.get(i).getNegativeNeighbourX(), storeSharks.get(i).getPositionY()));
                        Shark.setSumOfSharks(Shark.getNumOfSharks() - 2);
                    }
                }
            }
        }
    }


    public void resetStoreSharksArrayList() {
        storeSharks.clear();
    }

    public int getSizeOfStoreShark() {
        return storeSharks.size();
    }


    //This method is for testing purposes. Is the populating of the grid working?
    public void tellMeWhatsInside() {

        //System.out.println("Tell me whats inside?");
        int numOfFishSwarms = 0;
        int numOfSharks = 0;
        int numOfWater = 0;
        int empty = 0;
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < row; j++) {
                if (animal[i][j] != null) {
                    final Animal a1 = this.animal[i][j];
                    if (a1 instanceof Fish) {
                        numOfFishSwarms++;
                    }
                    if (a1 instanceof Shark) {
                        numOfSharks++;
                    } else {
                        numOfWater++;
                    }
                } else {
                    empty++;
                }
            }
        }
        Shark.setSumOfSharks(numOfSharks);
        Fish.setSumOfFishSwarms(numOfFishSwarms);

        if (empty == width * row) {
            System.out.println("all entries are null");
        } else {
            //  System.out.println("Fish:" + numOfFishSwarms + "\nSharks:" + numOfSharks + "\nWater:" + numOfWater);
        }
    }

}
