package Project;

import javax.swing.*;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.Random;

/**
 * This class sets up the animal grid, which then will be visualised by the Gui class.
 */
public class Model implements Serializable {


    // values received from driver class
    private final int width, row;
    private final Random rand;
    private final File storageFile;
    private boolean saved;
    //used for visualisation
    private Animal[][] animal;
    private ArrayList<Shark> storeSharks;
    // possible directions are north, south, west and east
    private ArrayList<String> possibleDirections;
    // for random movement (north, south, west, east)
    private String randomString;


    /**
     * Create a Model to handle storing, moving, replacing animals.
     *
     * @param width this int gets passed from the driver class and sets the with within grid
     * @param row   this int gets passed from the driver class and sets the amount of columns within the grid
     */
    public Model(int width, int row) {
        this.width = width;
        this.row = row;
        animal = new Animal[width][row];
        rand = new Random();
        storageFile = new File("Model.ser");
        possibleDirections = new ArrayList<>();
        storeSharks = new ArrayList<>();
        saved = false;
        placeAnimal();
    }

    /**
     * Places the Animal in the 2d grid.
     */
    public void placeAnimal() {
        if (animal == null) {
            animal = new Animal[width][row];
        }
        System.out.println("place Animals");
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < row; j++) {
                if (rand.nextInt(5) < 1) {
                    animal[i][j] = new Fish(); // place Fish-Object in animal Array
                }
            }
        }

        for (int i = 0; i < width; i++) {
            //System.out.println(i);
            for (int j = 0; j < row; j++) {
                // System.out.println(j);
                if (rand.nextInt(50) < 1 && !(animal[i][j] instanceof Fish)) {
                    animal[i][j] = new Shark(i, j);// place Shark-Object in animal Array
                    storeSharks.add((Shark) animal[i][j]);
                }
            }
        }

        for (int i = 0; i < width; i++) {
            for (int j = 0; j < row; j++) {
                if (animal[i][j] == null) {
                    animal[i][j] = new Water(); // place Water-Object in animal Array
                }
            }

        }
        // if no shark is generated by for-loop
        if (Shark.getNumOfSharks() == 0) {
            animal[width - 1][row - 1] = new Shark(width - 1, row - 1);
            storeSharks.add((Shark) animal[width - 1][row - 1]);
        }
    }

    /**
     * Returns the Animal which is placed in the 2d Animal Array
     *
     * @param positionX the number of the position within the grid. (width)
     * @param positionY the number of the position within the grid. (row)
     * @return the animal object which was placed within the 2d array
     */
    public Animal getAnimal(int positionX, int positionY) {
        return animal[positionX][positionY];
    }

    /**
     * Clears the 2d Array. All positions set to null.
     */
    public void resetAllAnimal() {
        System.out.println("Reset");
        Fish.resetSumOfFishSwarms();
        Shark.resetSumOfSharks();
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < row; j++) {
                animal[i][j] = null; // emptying the Array
            }
        }
    }

    /**
     * This method saves the Animal Array.
     * <p>
     * Created with help from Persistence notes (Powerpoint) and other sources:
     * https://stackoverflow.com/questions/1467193/java-serialization-of-multidimensional-array
     *
     * @param file is created when constuctor is envoked and gets stored within the running program
     */
    public void saveModel(File file) {
        try (final ObjectOutputStream objectOutputStream = new ObjectOutputStream(new FileOutputStream(file))) {
            (objectOutputStream).writeObject(animal);
            saved = true;
        } catch (IOException e) {
            e.printStackTrace();
        }
        System.out.println("saved");
    }

    /**
     * This method loads the Animal Array.
     * <p>
     * The loading was challenging, because the 2dArray had sometimes null assigned to it.
     * Therefore, I added the class Water to never have null assigned within the Array.
     * <p>
     * Created with help from Persistence notes (Powerpoint) and other source:
     * https://stackoverflow.com/questions/1467193/java-serialization-of-multidimensional-array
     *
     * @param file is created when constuctor is envoked and gets stored within the running program
     */
    public void loadModel(File file) {

        try (final ObjectInputStream objectInputStream = new ObjectInputStream(new FileInputStream(file))) {
            animal = (Animal[][]) objectInputStream.readObject();
        } catch (IOException | ClassNotFoundException e) {
            e.printStackTrace();
        }
        resetStoreSharksArrayList();
        //populate ArrayList of Sharks again
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < row; j++) {
                if (animal[i][j] instanceof Shark) {
                    storeSharks.add(new Shark(i, j));
                    //decrease stats per one, that amount of Shark is up to date
                    Shark.setSumOfSharks(Shark.getNumOfSharks() - 1);
                }
            }
        }
        System.out.println("loaded");
    }

    /**
     * Get the save file.
     *
     * @return the file which was saved
     */
    public File getStorageFile() {
        return storageFile;
    }

    /**
     * This method iterates through the storeSharks ArrayList and will call the moveShark method when the shark is alive.
     */
    public void letSharkSwim() {
        for (Shark shark : storeSharks) {
            if (shark.isAlive() == true) {
                moveShark(getNeighbours(shark), shark);
            }
        }
    }

    /**
     * This method stores possible directions the shark can swim.
     *
     * @param shark this object shall be moved
     * @return an ArrayList filled with free neighbour fields.
     */
    public ArrayList getNeighbours(Shark shark) {

        //clear it, it might has previous data in it
        possibleDirections.clear();

        //neighbour fields
        int north = shark.getPositiveNeighbourY();
        int south = shark.getNegativeNeighbourY();
        int west = shark.getNegativeNeighbourX();
        int east = shark.getPositiveNeighbourX();

        if (north != -1000) {
            if (animal[shark.getPositionX()][north] instanceof Water) {
                possibleDirections.add("north");
            }
        }

        if (south != -1000) {
            if (animal[shark.getPositionX()][south] instanceof Water) {
                possibleDirections.add("south");
            }
        }

        if (west != -1000) {
            if (animal[west][shark.getPositionY()] instanceof Water) {
                possibleDirections.add("west");
            }
        }

        if (east != -1000) {
            if (animal[east][shark.getPositionY()] instanceof Water) {
                possibleDirections.add("east");
            }
        }
        return possibleDirections;
    }

    /**
     * This method will place the shark at a neighbour position, if there are any possible directions passed. Furthermore, will it call the aging process.
     *
     * @param whereToSwim the list contains possible directions or can be null
     * @param shark       the object that shall be moved
     */
    public void moveShark(ArrayList whereToSwim, Shark shark) {
        possibleDirections = whereToSwim;
        //if shark is encountered by fish and walls
        if ((possibleDirections.isEmpty() == false)) {
            randomString = possibleDirections.get(rand.nextInt(possibleDirections.size()));

            //the actual position gets replaced with water
            animal[shark.getPositionX()][shark.getPositionY()] = null;
            animal[shark.getPositionX()][shark.getPositionY()] = new Water();
            Shark.setSumOfSharks(Shark.getNumOfSharks() - 1);

            // place it one more down
            if (randomString == "north") {
                animal[shark.getPositionX()][shark.getPositiveNeighbourY()] = new Shark(shark.getPositionX(), shark.getPositiveNeighbourY());
                shark.setPositionY(shark.getPositiveNeighbourY());
            }
            // place it one more up

            if (randomString == "south") {
                animal[shark.getPositionX()][shark.getNegativeNeighbourY()] = new Shark(shark.getPositionX(), shark.getNegativeNeighbourY());
                shark.setPositionY(shark.getNegativeNeighbourY());
            }

            // place it one more to the right

            if (randomString == "east") {
                animal[shark.getPositiveNeighbourX()][shark.getPositionY()] = new Shark(shark.getPositiveNeighbourX(), shark.getPositionY());
                shark.setPositionX(shark.getPositiveNeighbourX());
            }

            // place it one more to the left

            if (randomString == "west") {
                animal[shark.getNegativeNeighbourX()][shark.getPositionY()] = new Shark(shark.getNegativeNeighbourX(), shark.getPositionY());
                shark.setPositionX(shark.getNegativeNeighbourX());
            }
            //System.out.println(a.toString());
        }
        shark.increaseAge();
        checkAge(shark);
    }


    /**
     * deletes Sharks that reached age of 60
     *
     * @param shark the object which age needs to be checked
     */
    public void checkAge(Shark shark) {

        if (shark.isAlive() != true) {
            animal[shark.getPositionX()][shark.getPositionY()] = null;
            animal[shark.getPositionX()][shark.getPositionY()] = new Water();
            //Shark.setSumOfSharks(Shark.getNumOfSharks() - 1);
        }
    }

    /**
     * This method will increase the amount of sharks (create a new object) if the probability strikes.
     */
    public void spawnAShark() {
        int originalSize = storeSharks.size();

        for (int i = 0; i < originalSize; i++) {
            if (rand.nextInt(101) < 100 * Shark.getBirthProbability() && storeSharks.get(i).isAlive() == true) {


                possibleDirections = getNeighbours(storeSharks.get(i));

                //if shark is encountert by fish and walls
                if ((possibleDirections.isEmpty() == false)) {

                    randomString = possibleDirections.get(rand.nextInt(possibleDirections.size()));
                    // place it one more down
                    if (randomString == "north") {
                        animal[storeSharks.get(i).getPositionX()][storeSharks.get(i).getPositiveNeighbourY()] = new Shark(storeSharks.get(i).getPositionX(), storeSharks.get(i).getPositiveNeighbourY());
                        storeSharks.add(new Shark(storeSharks.get(i).getPositionX(), storeSharks.get(i).getPositiveNeighbourY()));
                        Shark.setSumOfSharks(Shark.getNumOfSharks() - 2);

                    }
                    // place it one more up

                    if (randomString == "south") {
                        animal[storeSharks.get(i).getPositionX()][storeSharks.get(i).getNegativeNeighbourY()] = new Shark(storeSharks.get(i).getPositionX(), storeSharks.get(i).getNegativeNeighbourY());
                        storeSharks.add(new Shark(storeSharks.get(i).getPositionX(), storeSharks.get(i).getNegativeNeighbourY()));
                        Shark.setSumOfSharks(Shark.getNumOfSharks() - 2);
                    }

                    // place it one more to the right

                    if (randomString == "east") {
                        animal[storeSharks.get(i).getPositiveNeighbourX()][storeSharks.get(i).getPositionY()] = new Shark(storeSharks.get(i).getPositiveNeighbourX(), storeSharks.get(i).getPositionY());
                        storeSharks.add(new Shark(storeSharks.get(i).getPositiveNeighbourX(), storeSharks.get(i).getPositionY()));
                        Shark.setSumOfSharks(Shark.getNumOfSharks() - 2);
                    }

                    // place it one more to the left

                    if (randomString == "west") {
                        animal[storeSharks.get(i).getNegativeNeighbourX()][storeSharks.get(i).getPositionY()] = new Shark(storeSharks.get(i).getNegativeNeighbourX(), storeSharks.get(i).getPositionY());
                        storeSharks.add(new Shark(storeSharks.get(i).getNegativeNeighbourX(), storeSharks.get(i).getPositionY()));
                        Shark.setSumOfSharks(Shark.getNumOfSharks() - 2);
                    }
                }
            }
        }
    }

    /**
     * This method clears the ArrayList storeSharks.
     */
    public void resetStoreSharksArrayList() {
        storeSharks.clear();
    }

    /**
     * This method is to check if the storageFile was safed, otherwise it will not load.
     *
     * @return a value true or false
     */
    public boolean isSaved() {
        return saved;
    }

    /**
     * This method is for testing purposes. Is the populating of the grid working?
     */
    public void tellMeWhatsInside() {

        //System.out.println("Tell me whats inside?");
        int numOfFishSwarms = 0;
        int numOfSharks = 0;
        int numOfWater = 0;
        int empty = 0;
        for (int i = 0; i < width; i++) {
            for (int j = 0; j < row; j++) {
                if (animal[i][j] != null) {
                    final Animal a1 = this.animal[i][j];
                    if (a1 instanceof Fish) {
                        numOfFishSwarms++;
                    }
                    if (a1 instanceof Shark) {
                        numOfSharks++;
                    } else {
                        numOfWater++;
                    }
                } else {
                    empty++;
                }
            }
        }
        Shark.setSumOfSharks(numOfSharks);
        Fish.setSumOfFishSwarms(numOfFishSwarms);

        if (empty == width * row) {
            System.out.println("all entries are null");
        } else {
            //  System.out.println("Fish:" + numOfFishSwarms + "\nSharks:" + numOfSharks + "\nWater:" + numOfWater);
        }
    }

}
